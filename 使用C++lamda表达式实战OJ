排名（杭电OJ 1236）
Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)
Total Submission(s): 33167    Accepted Submission(s): 12116


Problem Description
今天的上机考试虽然有实时的Ranklist，但上面的排名只是根据完成的题数排序，没有考虑 
每题的分值，所以并不是最后的排名。给定录取分数线，请你写程序找出最后通过分数线的 
考生，并将他们的成绩按降序打印。 
 

Input
测试输入包含若干场考试的信息。每场考试信息的第1行给出考生人数N ( 0 < N 
< 1000 )、考题数M ( 0 < M < = 10 )、分数线（正整数）G；第2行排序给出第1题至第M题的正整数分值；以下N行，每行给出一 
名考生的准考证号（长度不超过20的字符串）、该生解决的题目总数m、以及这m道题的题号 
（题目号由1到M）。 
当读入的考生人数为0时，输入结束，该场考试不予处理。 
 

Output
对每场考试，首先在第1行输出不低于分数线的考生人数n，随后n行按分数从高 
到低输出上线考生的考号与分数，其间用1空格分隔。若有多名考生分数相同，则按他们考 
号的升序输出。 
 

Sample Input
4 5 25
10 10 12 13 15
CS004 3 5 1 3
CS003 5 2 4 1 3 5
CS002 2 1 2
CS001 3 2 3 5
1 2 40
10 30
CS001 1 2
2 3 20
10 10 10
CS000000000000000001 0
CS000000000000000002 2 1 2
0
 

Sample Output
3
CS003 60
CS001 37
CS004 37
0
1
CS000000000000000002 20

Hint
Huge input, scanf is recommended.




AC 代码:
#include <bits/stdc++.h>
using namespace std;
const int N = 10000;
class point ;
static int32_t score[N];
static int32_t stunum,pronum,needmark;

class point
{
public:
    string name;
    int32_t ok;
    int32_t sum;
    static int32_t goodstu;
    point(){}
    void clearx()
    {
        ok=0;
        sum=0;
        name="";
    }
    friend istream & operator >> ( istream & in, point &a)
    {
        in>>a.name>>a.ok;
        for(int i=1;i<=a.ok;i++)
        {
            int32_t STATS;
            in>>STATS;
            a.sum+=score[STATS];
        }
        if(a.sum>=needmark)point::goodstu++;
        return in;

    }
    friend ostream & operator << ( ostream & os,const point & a)
    {
        os<<a.name<<" "<<a.sum<<endl;
        return os;
    }
    virtual ~point()
    {


    }




};
point newstudent;
static vector<point>vect;
int32_t point::goodstu=0;
int main()
{

    while(scanf("%d%d%d",&stunum,&pronum,&needmark)==3&&stunum)
    {
        vect.clear();

        point::goodstu=0;
        memset(score,0,sizeof score);
        for(int i=1;i<=pronum;i++)scanf("%d",&score[i]);
        for(int i=1;i<=stunum;i++){newstudent.clearx();cin>>newstudent;vect.push_back(newstudent);}

        printf("%d\n",point::goodstu);
        sort(vect.begin(),vect.end(),[&](point &a,point &b)->bool{if(a.sum!=b.sum)return a.sum>b.sum;return a.name<=b.name;});
        for_each(vect.begin(),vect.end(),[&](point&a)->void{if(a.sum>=needmark)cout<<a; });



    }
}
